import java.time.format.DateTimeFormatter
import java.time.LocalDateTime

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.4'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.javne'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

compileJava{
	options.compilerArgs += ["-parameters"]
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

task generatePostAndComments() {
	doLast {
		File dataSql = file("src/main/resources/data.sql")
		dataSql.write("")

		// Generowanie post√≥w
		for (int i = 1; i <= 100; i++) {
			def createdAt = LocalDateTime.now().minusDays(100 - i).format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))
			dataSql.append("INSERT INTO post (id, title, content, created) VALUES (${i}, 'Test post ${i}', 'Content ${i}', '${createdAt}');\n")
		}

		// Generowanie komentarzy
		for (int i = 1; i <= 100; i++) {
			int postId = 1 + i / 10
			def createdAt = LocalDateTime.now().minusDays(100 - i).format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))
			dataSql.append("INSERT INTO comment (id, post_id, content, created) VALUES (${i}, ${postId}, 'Comment ${i}', '${createdAt}');\n")
		}
	}
}

